享元模式
    池技术的重要实现方式，使用共享对象可有效地支持大量的细粒度的对象。当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。
    demo1 ----- 一个简单的示例
    demo3 ----- 围棋黑白棋子应用的示例

实现：
    需要将对象的信息分为两个部分： 内部状态；外部状态
    内部状态：
        对象可共享出来的信息，存储在享元对象内部并且不会随环境改变而改变。它们可以作为一个对象的动态附加信息，不必直接存储在具体某个对象中，属于可以共享的部分。
    外部状态：
        对象得以依赖的一个标记，是随环境改变而改变的，不可以共享的状态。它是对一批对象的统一标识，是唯一的索引值。
        也可以创建一个描述外部状态的类，但是要重写该类的 hashCode, 否则在 HashMap 中无法成为key。
        (如 demo2 中 ConcreteFlyWeight1 和 ConcreteFlyWeight2 的业务处理可能不一样, new 的时候取决于外部状态属性 extrinsic)

类图: (demo2是享元模式的模板代码)
    FlyWeight-----抽象享元角色
        一个产品的抽象类, 同时定义出对象的外部状态和内部状态的接口或实现。
    ConcreteFiyWeight------具体享元角色
        具体的产品类，实现抽象角色定义的业务.
    unsharedConcreteFlyWeight ------ 不可共享的享元角色
        不存在外部状态或者安全要求（如线程安全）不能够使用共享技术的对象，该对象一般不出现在享元工厂中。
    FlyWeight ----- 享元工厂
        构造一个容器池，同时提供从容器池中获得对象的方法。

使用场景：
    1.系统中存在大量的相似对象
    2.细粒度的对象都具备较接近的外部状态，而内部对象与环境无关，也就是说对象没有特定的身份。
    3.需要缓冲池的场景

注意：
    注意划分内部状态和外部状态，否则可能会引起线程安全问题
    这些类必须有一个工厂类加以控制

享元模式与单例模式的区别
    （1）享元设计模式是一个类有很多对象，而单例是一个类仅一个对象。
    （2）享元模式是为了节约内存空间，提升程序性能，而单例模式则主要是出于共享状态的目的。