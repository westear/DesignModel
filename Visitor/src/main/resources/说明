访问者模式: 封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。

类图角色：
    Visitor 抽象访问者: 声明访问者可以访问哪些元素
    ConcreteVisitor 具体访问者: 影响访问者访问到一个类之后应该干什么，要做什么事情
    Element 抽象元素: 声明接受哪一类访问者访问
    ConcreteElement 具体元素: 实现访问方法， 通常是visitor.visit(this);
    ObjectStructure 结构对象：元素生产者，一般容纳在多个不同类，不同接口容器中，如: List, Set, Map

通用代码模板: demo2

优点:
    符合单一职责原则： Element类的子类负责数据加载， 而Visitor类负责业务调用
    扩展性良好
    灵活性高

缺点：
    具体元素对访问者公布细节
    具体元素变更困难
    违背依赖倒置原则： 访问者依赖具体元素，而不是抽象元素。

扩展：
    1.统计功能(demo3)，比如在demo1中的 IVisitor 接口增加一个统计方法, 所有的修改都在 visitor 类中进行
    2.多个访问者(demo4)，一个类有多个访问者: demo4中的 ShowVisitor 和 TotalVisitor
    3.双分派(demo5): 执行的操作决定于请求的种类和两个接受者的类型
      单分派：处理一个操作是根据请求者的名称和接收到的参数决定的，在 Java 中有静态绑定和动态绑定只说，它的实现是依据重载和覆写实现的。
