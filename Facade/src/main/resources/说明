门面模式(外观模式): 一种比较常用的封装模式。要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。

demo1: 通用代码模板

角色:
    Facade 门面角色
        客户端可以调用这个角色的方法。此角色知晓子系统的所有功能和责任。
    SubSystem 子系统角色
        可以同时有一个或者多个子系统。每个子系统都不是一个单独的类，而是一个类的集合。子系统不知道门面的存在。对于子系统而言，门面仅仅是另一个客户端而已。

优点：
    减少系统之间的相互依赖
    提高灵活性
    提高安全性

缺点:
    不符合开闭原则，对修改关闭，对扩展开放。门面角色成为这个模式中最重要的一块代码类

使用场景
    为一个复杂模块或子系统提供一个供外界访问你的接口
    子系统相对独立——外界对子系统的访问只要提供黑箱操作即可

注意事项
    1.一个子系统可以有多个门面，情况如下：
        1.1 门面类代码行数已经庞大到不能忍受的程度，可以拆分成多个门面
        1.2 子系统可以提供不同的访问路径。可能是因为有多个不同的高层模块访问子系统类. 如demo1.Facade2

    2.门面不参与子系统内部的业务逻辑。如：demo1.FacadeV2, demo1.Context
        门面角色应该尽量稳定，而不应该经常变化，毕竟是提供给外部调用的类
