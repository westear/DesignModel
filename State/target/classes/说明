状态模式：当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类。
    这个模式的核心是封装，状态的变更引起了行为的变更，从外部看起来就好像这个对象对应的类发生了改变一样。

角色： demo2
    State 抽象状态角色:
        负责定义抽象状态定义，并且封装环境角色以实现状态切换；
    ConcreteState 具体状态角色:
        每个具体状态必须完成两个职责：
            1.本状态的行为管理以及趋向状态处理，通俗地说，就是本状态下要做的事情
            2.本状态如何过渡到其他状态
    Context 环境角色:
        定义客户端需要的接口，并且负责具体状态的切换。

优点：
    结构清晰，避免了 switch...case...代码
    遵循设计原则,每个状态都是子类
    封装性非常好，状态变换放到状态子类内部实现

缺点:
    子类太多，类膨胀。

使用场景:
    行为随着状态改变而改变的场景
    条件、分支判断语句的替代者