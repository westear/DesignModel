解释器模式（项目中使用得很少的一种模式）:
    给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子

角色：
    AbstractExpression 抽象解释器:
        具体的解释任务由各个实现类完成，具体解释器分别由 TerminalExpression 和 NonTerminalExpression 完成。
    TerminalExpression 终结符表达式：
        实现与文法的元素关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。如 demo1.VarExpression 对象
    NonTerminalExpression 非终结符表达式:
        文法中的每条规则对应于一个非终结表达式，具体到我我们的例子就是加减法规则分别对应到 demo1.AddExpression 和 demo1.SubExpression 两个类。
        非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式
    Context 环境角色:
        具体到我们的例子中采用 HashMap 代替

使用场景：
    重复发生的问题可以使用解释器模式。如： 日志分析，不同的日志格式不同，但数据元素是相同的。
    一个简单的语法需要解释得场景