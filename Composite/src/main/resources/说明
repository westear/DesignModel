组合模式，又叫部分---整体模式,用来描述部分与整体的关系
    定义: 将对象组合成树形结构以表示 “部分--整体” 的层次结构， 使得用户对单个对象和组合对象的使用具有一致性。

demo1 的代码模拟的是公司员工的组织结构:
    demo1: Corp是顶级节点， Branch是领导节点， Leaf是普通员工节点, Leaf是Branch的下属

demo2 是使用组合模式优化了demo1的示例:
    demo2: Corp是员工基本信息的抽象类。Branch是领导节点，拓展了Corp类，具有下属信息的列表属性以及对应的添加、遍历方法。Leaf是普通员工节点, Leaf是Branch的下属

demo3 是组合模式的"安全模式"实现的的代码模板
demo4 是组合模式的"透明模式"实现的的代码模板



组合模式的角色：
    1.Component抽象构件角色
        定义组合对象的共有方法和属性，可以定义一些默认的行为和属性，比如demo2中的Corp抽象类
    2.Leaf叶子构件
        其下再也没有其他分支，也就是遍历的最小单位
    3.Composite树枝构件
        作用是组合树枝节点和叶子节点形成一个树形结构

优点:
    1.高层调用简单
        局部和整体都是Component，对调用者来说没有任何区别
     2.节点自由增加, 符合开闭原则，可以自由扩展

缺点：
    在场景调用的类中，直接使用了树枝类和树叶类的实现类，与依赖倒置原则冲突

使用场景:
    1.维护和展示部分--整体关系的场景，如树形菜单，文件和文件管理
    2.从整体中能够独立出部分模块或者功能的场景

组合模式的两种不同的实现：
    1.安全模式： demo1, demo2, demo3
    2.透明模式: demo4

