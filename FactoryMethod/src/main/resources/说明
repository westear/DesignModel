工厂方法模式
    定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。

demo2 示范工厂模式的通用代码：
    该模式中，抽象产品类Product负责定义产品的共性，实现对事物最抽象的定义；Creator为抽象创建类，也就是抽象工厂，
    具体如何创建产品则由具体的实现工厂ConcreteCreator完成。

优点:
    良好的封装性，代码结构清晰
    降低模块间的耦合
    扩展性优秀： 增加“产品线”就新增Factory类， 新增“产品”就新增Product类
    屏蔽产品类，调用者不需要关心产品实现的变化

使用场景：
    1、在所有需要生成对象的地方都可以考虑使用
    2、需要灵活，可扩展的框架时可以考虑
    3、已购项目整合

扩展：
    1、缩小为简单工厂模式
        demo3示例: 一个模块仅需要一个工厂类，没有必要把它生产出来，使用静态方法就可以了。

    2、升级为多个工厂类
        demo4示例：多个工厂，每个工厂负责new一个产品

    3、替代单例模式
        demo5示例： 内存中只能产生一个对象

    4、延迟初始化
        demo6示例：一个对象被消费完毕后，并不立刻释放，工厂类保持其初始状态。
                  ProductFactory负责产品类对象的创建工作，并且通过prMap变量产生一个缓存，对需要再次被重用的对象保留。
